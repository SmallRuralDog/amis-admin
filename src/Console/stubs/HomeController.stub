<?php

namespace DummyNamespace;

use AmisAdmin;
use App\Http\Controllers\Controller;
use SmallRuralDog\AmisAdmin\Renderers\Card;
use SmallRuralDog\AmisAdmin\Renderers\Chart;
use SmallRuralDog\AmisAdmin\Renderers\Divider;
use SmallRuralDog\AmisAdmin\Renderers\Flex;
use SmallRuralDog\AmisAdmin\Renderers\Form\AmisForm;
use SmallRuralDog\AmisAdmin\Renderers\Form\InputDate;
use SmallRuralDog\AmisAdmin\Renderers\Form\InputText;
use SmallRuralDog\AmisAdmin\Renderers\GridNav;
use SmallRuralDog\AmisAdmin\Renderers\GridSchema;
use SmallRuralDog\AmisAdmin\Renderers\Page;
use SmallRuralDog\AmisAdmin\Renderers\Panel;
use SmallRuralDog\AmisAdmin\Renderers\Progress;
use SmallRuralDog\AmisAdmin\Renderers\Tpl;
use SmallRuralDog\AmisAdmin\Renderers\Wrapper;

class HomeController extends Controller
{

    public function index()
    {

        $page = Page::make();

        $page->body([
            GridSchema::make()->columns([
                $this->buildCard("访问量", random_int(10000, 100000), Flex::make()
                    ->justify('start')
                    ->className('text-sm')
                    ->items([
                        Tpl::make()->tpl("日同比 12.5%")->className('mr-5'),
                        Tpl::make()->tpl("周同比 5%"),
                    ])),
                $this->buildCard("销售额", random_int(10000, 100000), Progress::make()->value(60)->showLabel(false)),
                $this->buildCard("订单量", random_int(10000, 100000), null),
                $this->buildCard("新增用户", random_int(10000, 100000), null),
            ]),
            $this->getGridNav(),
            $this->getChart(),
        ]);

        return AmisAdmin::response($page);
    }

    private function buildCard(string $title, float $value, $body): Card
    {
        return Card::make()
            ->body([
                Tpl::make()->tpl(number_format($value))->className('text-2xl'),
                Wrapper::make()
                    ->style(['height' => '30px'])
                    ->size('none')
                    ->className('mt-3')
                    ->body([
                        $body
                    ]),
                Divider::make(),
                Flex::make()
                    ->justify('space-between')
                    ->items([
                        "总$title",
                        (int)($value / 1000) . " 万"
                    ]),
            ])
            ->toolbar([Tpl::make()->tpl("日")->className('label label-warning')])
            ->header(['title' => $title]);
    }

    public function chartMock()
    {

        $path = request('path');

        $url = "https://aisuda.bce.baidu.com" . $path;
        return \Http::get($url)->json();

    }

    private function getGridNav()
    {
        $items = [];
        foreach (range(1, 8) as $item) {
            $items[] = [
                'icon' => 'https://internal-amis-res.cdn.bcebos.com/images/icon-1.png',
                'text' => '这是标题' . $item,
            ];
        }

        return Page::make()
            ->style(['height' => 'auto'])
            ->data([
                'items' => $items,
            ])
            ->body(GridNav::make()->columnNum(8)->source('${items}'));
    }


    private function getChart(): Panel
    {

        return Panel::make()->title("数据统计")->body([

            AmisForm::make()->title("过滤条件")
                ->target("chart1,chart2,chart3,chart4")
                ->submitOnInit(true)
                ->className("m-b")
                ->wrapWithPanel(false)
                ->mode("inline")
                ->body([
                    InputDate::make()->name("starttime")->label("开始日期")->value("-8days")->maxDate('${endtime}'),
                    InputDate::make()->name("endtime")->label("结束日期")->value("-1days")->minDate('${starttime}'),
                    InputText::make()->name("name")->label("条件")->addOn(['type' => 'submit', 'label' => '查询'])
                ]),
            GridSchema::make()
                ->columns([
                    Chart::make()
                        ->name('chart1')
                        ->initFetch(false)
                        ->api(route('admin.chartMock', ['path' => '/amis/api/mock2/chart/chart2?name=$name&starttime=${starttime}&endtime=${endtime}']))->lg(6),
                    Chart::make()
                        ->name('chart2')
                        ->initFetch(false)
                        ->height(150)
                        ->api(route('admin.chartMock', ['path' => '/amis/api/mock2/chart/chart2?name=$name']))->lg(6),

                    Chart::make()
                        ->name('chart3')
                        ->initFetch(false)
                        ->height(150)
                        ->api(route('admin.chartMock', ['path' => '/amis/api/mock2/chart/chart1?name=$name']))->lg(6),

                    Chart::make()
                        ->name('chart4')
                        ->initFetch(false)
                        ->height(150)
                        ->api(route('admin.chartMock', ['path' => '/amis/api/mock2/chart/chart1?name=$name']))->lg(6),
                ]),
        ]);
    }
}
